'use strict';

import { ResponseToolkit } from "hapi";
import { UrlWithParsedQuery } from "url";
import {Tasks} from "../models/ArrayModel"
import {Task} from "../models/ArrayModel"
export default [

    // Get all
    {
        method: 'GET',
        path: '/tasks',
        handler: async(request: UrlWithParsedQuery, h: string) => 
        {
            // Add an empty array for filtering/sorting
            var queriedTasks:Task[] = []

            // Checks for completed status parameter
            if (request.query.completed == 'true' || request.query.completed == 'false')
            {
                // Checks a task's status against the requested parameter
                for (var i = 0; i < Tasks.length; i ++)
                {
                    // Add task to the new array if the status matches
                    if (Tasks[i].completed.toString() == request.query.completed)
                    {
                        queriedTasks.push(Tasks[i]);
                    }
                }
            }
            else
            {
                // Assigns the base array to the response if no filter was toggled
                queriedTasks = Tasks;
            }

            // Selects case based upon what query paramter was entered for sorting. 
            switch (request.query.sort_by)
            {
                case 'createdAt.asc':
                    queriedTasks.sort((a,b) => +new Date(a.createdAt) - +new Date(b.createdAt));
                    break;

                case 'createdAt.desc':
                    queriedTasks.sort((a,b) => +new Date(b.createdAt) - +new Date(a.createdAt));
                    break;

                case 'dueDate.asc':
                    queriedTasks.sort((a,b) => +new Date(a.dueDate) - +new Date(b.dueDate));
                    break;

                case 'dueDate.desc':
                    queriedTasks.sort((a,b) => +new Date(b.dueDate) - +new Date(a.dueDate));
                    break;
            }

            // Returns the filtered/sorted array
            return queriedTasks;
        }
    },
    
    // Fetch
    {
        method: 'GET',
        path: '/tasks/{id}',
        handler: (  
            request: { 
                params: { 
                    id: number; }; 
                }, 
                h: string) => 
        {
            // Returns one element of the array
            return Tasks[request.params.id - 1];
        }
    },

    // Add task
    {
        method: 'POST',
        path: '/tasks',
        handler: (
            request: { 
                payload: { 
                    taskDescription: string; 
                    CreatedAt: Date; 
                    dueDate: Date; 
                    completed: boolean; }; 
                }, 
                h: ResponseToolkit) =>
        {
            const Task =
            {
                // ID is inmutable, auto-generated by the program.
                id:Tasks.length + 1,
                taskDescription:request.payload.taskDescription,
                createdAt:new Date(),
                dueDate:request.payload.dueDate, 
                completed:request.payload.completed
            };

            // Updating array with the new entry
            Tasks.push(Task);

            // hapi sends a 200 OK by default, so I'm specifiying a 201 here.
            return h.response(Task).code(201)
        }
    },

    // Update task
    {
        method: 'PUT',
        path: '/tasks/{id}',
        handler: (
            request: { 
                params: { 
                    id: number; 
                }; 
            payload: { 
                taskDescription: string; 
                dueDate: Date; 
                completed: boolean; 
            }; 
        },
        h: string
        ) =>
        {
            // Update the correct task
            let Task = Tasks[request.params.id - 1]
            
            // ID and Date Created are inmutable. 
            Task.id = Number(request.params.id);
            Task.taskDescription = request.payload.taskDescription;
            Task.createdAt = Task.createdAt;
            Task.dueDate = request.payload.dueDate;
            Task.completed = request.payload.completed;

            Tasks[request.params.id - 1] = Task;
            return Task;
        }
    },

    // Delete task
    {
        method: 'DELETE',
        path: '/tasks/{id}',
        handler: (
            request: { 
                params: { id: number; }; 
            }, 
            h: string) =>
        {
            Tasks.splice((request.params.id - 1), 1)
            return null;
        }
    }
]
