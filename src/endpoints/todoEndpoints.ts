'use strict';

import {Tasks} from "../models/ArrayModel"


// All tasks 
// export var getAll =


export default [
    
    // Get all
    {
        method: 'GET',
        path: '/tasks',
        handler: (
            request: any, 
            h: any) => 
        {
            // Returns the whole array
            return Tasks;
        }
    },
    
    // Fetch
    {
        method: 'GET',
        path: '/tasks/{id}',
        handler: (
            request: { 
                params: { 
                    id: number; }; 
                }, 
                h: any) => 
        {
            // Returns one element of the array
            return Tasks[request.params.id - 1];
        }
    },

    // Add task
    {
        method: 'POST',
        path: '/tasks',
        handler: (
            request: { 
                payload: { 
                    taskDescription: any; 
                    dateCreated: any; 
                    dueDate: any; 
                    completed: any; }; 
                }, 
                h: any) =>
        {
            const Task =
            {
                // ID is inmutable, auto-generated by the program.
                id:Tasks.length + 1,
                taskDescription:request.payload.taskDescription,
                createdDate:request.payload.dateCreated,
                dueDate:request.payload.dueDate, 
                completed:request.payload.completed
            };

            // Updating array with the new entry
            Tasks.push(Task);

            // hapi sends a 200 OK by default, so I'm specifiying a 201 here.
            return h.response(Task).code(201)
        }
    },

    // Update task
    {
        method: 'PUT',
        path: '/tasks/{id}',
        handler: (
            request: { 
                params: { 
                    id: number; 
                }; 
            payload: { 
                taskDescription: string; 
                dueDate: string; 
                completed: boolean; 
            }; 
        },
        h: any
        ) =>
        {
            // Update the correct task
            let Task = Tasks[request.params.id - 1]
            
            // ID and Date Created are inmutable. 
            Task.id = request.params.id;
            Task.taskDescription = request.payload.taskDescription;
            Task.createdDate = Task.createdDate;
            Task.dueDate = request.payload.dueDate;
            Task.completed = request.payload.completed;

            Tasks[request.params.id - 1] = Task;
            return Task;
        }
    },

    // Delete task
    {
        method: 'DELETE',
        path: '/tasks/{id}',
        handler: (
            request: { 
                params: { id: number; }; 
            }, 
            h: any) =>
        {
            delete Tasks[request.params.id - 1];

            return null;
        }
    }
]
